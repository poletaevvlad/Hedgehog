on:
  push:
    tags:
      - "v*"

jobs:
  build-binary-linux:
    name: build-binary-linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install cargo and tools
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libsqlite3-dev libdbus-1-dev libssl-dev libgstreamer1.0-dev 

      - name: Create an archive
        run: make archive

      - name: Upload the binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: binary-releases
          path: ./build
          retention-days: 1

  build-binary-windows:
    name: build-binary-windows
    runs-on: windows-latest
    strategy:
      matrix:
        arch:
          - x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install cargo and tools
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install gstreamer
        run: |
          choco install --yes ${{ matrix.arch == 'i686' && '--forcex86' || '' }} gstreamer-devel
          choco install --yes ${{ matrix.arch == 'i686' && '--forcex86' || '' }} pkgconfiglite --download-checksum 2038c49d23b5ca19e2218ca89f06df18fe6d870b4c6b54c0498548ef88771f6f --download-checksum-type sha256 --version 0.28

      - name: Create an archive
        shell: cmd
        run: .\build-win.bat ${{ matrix.arch }} /A
        env:
          PKG_CONFIG_PATH: C:\gstreamer\1.0\msvc_x86_64\lib\pkgconfig

      - name: Rename the archive
        shell: pwsh
        run: |
          $Version = (
            Select-String -Path .\hedgehog-tui\Cargo.toml -Pattern '^version = "(\d+\.\d+\.\d+)"$'
          ).Matches[0].Groups[1].Value
          Get-ChildItem -Path .\build\*.zip | ForEach-Object { 
              Rename-Item $_.FullName -NewName $_.Name.Replace("current", $Version)
          }

      - name: Upload the binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: binary-releases
          path: ./build
          retention-days: 1

  create-release:
    name: create-release
    runs-on: ubuntu-latest
    needs:
      - build-binary-linux
      - build-binary-windows
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Get version number
        run: echo "HEDGEHOG_VERSION=$(make version)" >> $GITHUB_ENV

      - name: Download the built artifact
        uses: actions/download-artifact@v3
        with:
          name: binary-releases
          path: build

      - name: Create a Release
        uses: softprops/action-gh-release@v1
        with:
          name: Hedgehog ${{ env.HEDGEHOG_VERSION }}
          files: build/*

  update-manual-html:
    name: update-manual-html
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up ruby
        uses: actions/setup-ruby@v1

      - name: Install ronn
        run: gem install ronn
    
      - name: Build HTML
        run: make hedgehog.1.html

      - name: Commit changes
        run: |
          mv hedgehog.1.html /tmp/hedgehog.1.html
          git fetch
          git checkout -B gh-pages origin/gh-pages
          mv /tmp/hedgehog.1.html hedgehog.1.html
          if [ "$(git status --porcelain)" != "" ]; then
            git add hedgehog.1.html
            git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
            git config user.name "Github Actions"
            git commit -m "Automatically rebuilt the manual"
            git push --force origin gh-pages
          fi

